<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="ContactEditor test">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import pl.mllr.extensions.contactEditor.ContactEditor;
			
			import spark.events.TextOperationEvent;
			[Bindable]
			private var myDB:ArrayCollection;

			protected var _filterUpper:String = "";
			
			private var contactEditor:ContactEditor;
			
			protected function addContact(event:MouseEvent):void
			{
				if(!contactEditor)
					contactEditor=new ContactEditor();
				contactEditor.addEventListener(StatusEvent.STATUS,onStatus);
				contactEditor.addContact("imiÄ™","nazwisko","123123123","firma","adres@email.com","mllr.pl");		
			}
			protected function getContactCount(event:MouseEvent):void
			{
				if(!contactEditor)
					contactEditor=new ContactEditor();
				contactEditor.addEventListener(StatusEvent.STATUS,onStatus);
				textArea.appendText("available contacts: " + contactEditor.getContactCount() + "\n");
			}
			protected function removeContact(event:MouseEvent):void
			{
				try{
					if(!contactEditor)
						contactEditor=new ContactEditor();
					contactEditor.addEventListener(StatusEvent.STATUS,onStatus);
					if(lista.selectedItem.recordId is int)
						textArea.appendText("is int");
					if(lista.selectedItem.recordId is String)
						textArea.appendText("is String");
					if(lista.selectedIndex!=-1)
						textArea.appendText("trying to remove contact "+ lista.selectedItem.recordId + " : " + (contactEditor.removeContact(lista.selectedItem.recordId)?"ok":"not found") + "\nrefresh contacts to see changes\n");
					else
						textArea.appendText("select element from list");
				}catch(e:Error){
					textArea.appendText(e.message+"\n");
				}
			}
			protected function getContacts(event:MouseEvent):void
			{
				try{
					busyInd.visible = true;
					if(!contactEditor)
						contactEditor=new ContactEditor();
					contactEditor.addEventListener(StatusEvent.STATUS,onStatus);
					var array:Array=null;
					if(simpleMode.selected)
						array = contactEditor.getContactsSimple();
					else
						array = contactEditor.getContacts();
					if(array)
					{
						myDB=new ArrayCollection(array.concat());
						myDB.filterFunction = filter;
						lista.dataProvider=myDB;
						/*if(outputPrint.selected)
						{
							textArea.appendText("received contacts: " + array.length + "\n");
							if(outputPrint.selected)
							{
								for(var i:int=0;i<array.length;i++)
								{
									textArea.appendText("--------------------------------------------\n");
									for (var j:Object in array[i]) 
									{
										textArea.appendText(j + " : " + array[i][j] +  "\n");
									}
									
								}
							}
						}*/
					}
					else
						textArea.appendText("error receiving contact list\n");
				}catch(e:Error){
					textArea.appendText(e.message+"\n");
				}
				busyInd.visible = false;
			}
			protected function getDetails(event:MouseEvent):void
			{
				if(lista.selectedIndex!=-1)
				{
					if(simpleMode.selected){
						readDetails(contactEditor.getContactDetails(lista.selectedItem.recordId));
					}else{
						readDetails(lista.selectedItem);
					}
				}
			}
			
			
			private function readDetails(obj:Object):void
			{
				if(obj==null)
					return;
				textArea.appendText("-details for selected contact:-------------\n");
				for (var j:Object in obj)
				{
					textArea.appendText(j + " : " + obj[j] +  "\n");

				}
				textArea.appendText("-------------------------------------------\n");
			}
			
			
			protected function onStatus(event:StatusEvent):void
			{
				textArea.appendText(event.code+":     "+event.level+"\n");
			}
			
			
			
			
			/**
			 * function dispached on every data in dataprovieder when the filter text changes 
			 */
			protected function filter(object:Object):Boolean
			{
				if(_filterUpper=="")
					return true;
				else if(object.hasOwnProperty("compositename") && object.compositename.toUpperCase().indexOf(_filterUpper) != -1)
					return true;
				return false;
			}
			protected function filterList(event:TextOperationEvent):void
			{
				if(myDB==null)
					return;
				
				_filterUpper = TextInput(event.target).text.toUpperCase();
				myDB.refresh();
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<s:HGroup width="100%" height="5%" horizontalAlign="center" verticalAlign="middle">
		<s:TextInput prompt="search" change="filterList(event)"/>
		<s:BusyIndicator id="busyInd" visible="false"/>
		<s:Button x="-8" width="143" label="add contact" click="addContact(event)"/>
		<s:Button width="87" label="get all"
				  click="getContacts(event)"/>
		<s:Button width="112" label="get count"
				  click="getContactCount(event)"/>
		<s:Button width="112" label="details"
				  click="getDetails(event)"/>
		<s:Button width="106" label="remove"
				  click="removeContact(event)"/>
		<s:CheckBox id="simpleMode" width="194" height="47" label="take simple" selected="true"/>
		<!--<s:CheckBox id="outputPrint" width="194" height="47" label="output contacts"/>-->
	</s:HGroup>
	
	
	<s:List x="0" y="51" width="100%" height="50%" id="lista" labelField="compositename"></s:List>
	<s:TextArea id="textArea" x="0" y="567" width="100%" height="40%" editable="false"/>
</s:View>
